import logging
import aiosqlite
import asyncio
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Replit Secrets
BOT_TOKEN = os.getenv("BOT_TOKEN", "7807764002:AAGwGZmzbz-kroPyWf9kp2C0JmRdjob-Fpc")
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "8123068186").split(",") if id]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN")
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_PATH = 'fanpay_bot.db'
MESSAGES = {
    "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è PUBG Mobile - Metro Royale! üéÆ",
    "no_access": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    "no_squads": "üè† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤.",
    "no_escorts": "üë§ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
    "no_orders": "üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "no_active_orders": "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
    "invalid_format": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "order_completed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
    "order_already_completed": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
    "balance_added": "üí∏ –ë–∞–ª–∞–Ω—Å {amount} —Ä—É–±. –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
    "squad_full": "‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
    "squad_too_small": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!",
    "order_added": "üìù –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω! –°—É–º–º–∞: {amount} —Ä—É–±., –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –ö–ª–∏–µ–Ω—Ç: {customer}"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    squad_name = State()
    escort_info = State()
    pubg_id = State()
    balance_amount = State()
    complete_order_rating = State()
    add_order = State()

# –í—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
ORDERS = [
    {"id": "123", "amount": 1000.0, "description": "–ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç–∞", "customer": "Client1", "category": "accompaniment"},
    {"id": "456", "amount": 5000.0, "description": "–ü—Ä–æ–¥–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–∞", "customer": "Client2", "category": "accompaniment"}
]

# –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES_DATA = []

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.executescript('''
            CREATE TABLE IF NOT EXISTS squads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS escorts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                pubg_id TEXT,
                squad_id INTEGER,
                balance REAL DEFAULT 0,
                reputation INTEGER DEFAULT 0,
                completed_orders INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id)
            );
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fanpay_order_id TEXT UNIQUE NOT NULL,
                customer_info TEXT,
                amount REAL,
                status TEXT DEFAULT 'pending',
                squad_id INTEGER,
                completed_at TIMESTAMP,
                rating INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id)
            );
            CREATE TABLE IF NOT EXISTS order_escorts (
                order_id INTEGER,
                escort_id INTEGER,
                pubg_id TEXT,
                PRIMARY KEY (order_id, escort_id),
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (escort_id) REFERENCES escorts (id)
            );
        ''')
        await conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def get_escort(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–º."""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT id, squad_id, pubg_id, balance, reputation, completed_orders, username "
            "FROM escorts WHERE telegram_id = ?", (telegram_id,)
        )
        return await cursor.fetchone()

async def add_escort(telegram_id: int, username: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ."""
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO escorts (telegram_id, username) VALUES (?, ?)",
            (telegram_id, username)
        )
        await conn.commit()

async def get_squad_escorts(squad_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Telegram ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö –≤ —Å–∫–≤–∞–¥–µ."""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT telegram_id, username, pubg_id FROM escorts WHERE squad_id = ?", (squad_id,)
        )
        return await cursor.fetchall()

async def get_squad_info(squad_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–≤–∞–¥–µ."""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT s.name, COUNT(e.id) as member_count,
                   SUM(e.completed_orders) as total_orders,
                   SUM(e.balance) as total_balance
            FROM squads s
            LEFT JOIN escorts e ON e.squad_id = s.id
            WHERE s.id = ?
            GROUP BY s.id
            ''', (squad_id,)
        )
        return await cursor.fetchone()

async def notify_squad(squad_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–º –≤ —Å–∫–≤–∞–¥–µ."""
    try:
        escorts = await get_squad_escorts(squad_id)
        for telegram_id, _, _ in escorts:
            try:
                await bot.send_message(telegram_id, message)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–≤–∞–¥–∞ {squad_id}: {e}")

async def notify_admins(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ---
async def fetch_manual_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π."""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            for order in ORDERS:
                if order.get('category') == 'accompaniment':
                    await conn.execute(
                        '''
                        INSERT OR IGNORE INTO orders (fanpay_order_id, customer_info, amount, status)
                        VALUES (?, ?, ?, 'pending')
                        ''',
                        (order['id'], order.get('customer', 'Unknown'), order['amount'])
                    )
            await conn.commit()
        logger.info("–ó–∞–∫–∞–∑—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        await notify_admins("üîî –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return ORDERS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ ---
def is_admin(user_id: int) -> bool:
    if not ADMIN_IDS:
        logger.warning("–°–ø–∏—Å–æ–∫ ADMIN_IDS –ø—É—Å—Ç")
        return False
    return user_id in ADMIN_IDS

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard(user_id: int):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    buttons = [
        [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")]
    ]
    if is_admin(user_id):
        buttons.append([KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    keyboard.keyboard = buttons
    return keyboard

def get_admin_keyboard():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    buttons = [
        [KeyboardButton(text="üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")],
        [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")],
        [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")],
        [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")],
        [KeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–æ–≤")],
        [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")],
        [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
    ]
    keyboard.keyboard = buttons
    return keyboard

def get_squad_menu(squad_id: int):
    """–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è —Å–∫–≤–∞–¥–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–∞", callback_data=f"squad_stats_{squad_id}")],
        [InlineKeyboardButton(text="üë• –°–æ—Å—Ç–∞–≤ —Å–∫–≤–∞–¥–∞", callback_data=f"squad_members_{squad_id}")]
    ])
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    try:
        await add_escort(user_id, username)
        await message.answer(MESSAGES["welcome"], reply_markup=get_main_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def main_menu(message: types.Message):
    try:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
async def admin_help(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        response = (
            "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:\n"
            "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∫–≤–∞–¥ (3-6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).\n"
            "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∫–≤–∞–¥—ã –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
            "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–≤–∞–¥.\n"
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã.\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.\n"
            "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ.\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–≤–∞–¥–æ–≤.\n"
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n"
            "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_help: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")
async def add_squad(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        await state.set_state(Form.squad_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_squad: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.squad_name))
async def process_squad_name(message: types.Message, state: FSMContext):
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer(MESSAGES["invalid_format"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            await conn.commit()
        await message.answer(f"üè† –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∫–≤–∞–¥: {squad_name}")
        await notify_admins(f"üè† –ù–æ–≤—ã–π —Å–∫–≤–∞–¥ '{squad_name}' —Å–æ–∑–¥–∞–Ω")
    except aiosqlite.IntegrityError:
        await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_squad_name: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
async def list_squads(message: types.Message):
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, name, (SELECT COUNT(*) FROM escorts WHERE squad_id = squads.id) as count "
                "FROM squads"
            )
            squads = await cursor.fetchall()

        if not squads:
            await message.answer(MESSAGES["no_squads"])
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        response = "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤:\n"
        for squad_id, name, count in squads:
            response += f"{squad_id}. {name} ({count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=f"{name}", callback_data=f"squad_menu_{squad_id}")])
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_squads: {e}")
        await message.answer(MESSAGES["error"])

@dp.callback_query(F.data.startswith('squad_menu_'))
async def squad_menu(callback_query: types.CallbackQuery):
    squad_id = int(callback_query.data.split('_')[2])
    try:
        squad_info = await get_squad_info(squad_id)
        if not squad_info:
            await callback_query.answer("‚ö†Ô∏è –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        name, member_count, total_orders, total_balance = squad_info
        response = (
            f"üè† –°–∫–≤–∞–¥: {name}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
            f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_balance:.2f} —Ä—É–±."
        )
        await callback_query.message.answer(response, reply_markup=get_squad_menu(squad_id))
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_menu: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.callback_query(F.data.startswith('squad_stats_'))
async def squad_stats(callback_query: types.CallbackQuery):
    squad_id = int(callback_query.data.split('_')[2])
    try:
        squad_info = await get_squad_info(squad_id)
        if not squad_info:
            await callback_query.answer("‚ö†Ô∏è –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        name, member_count, total_orders, total_balance = squad_info
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–∞ '{name}':\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
            f"üìã –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {total_balance:.2f} —Ä—É–±."
        )
        await callback_query.message.answer(response)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_stats: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.callback_query(F.data.startswith('squad_members_'))
async def squad_members(callback_query: types.CallbackQuery):
    squad_id = int(callback_query.data.split('_')[2])
    try:
        escorts = await get_squad_escorts(squad_id)
        if not escorts:
            await callback_query.answer("‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", show_alert=True)
            return
        response = "üë• –°–æ—Å—Ç–∞–≤ —Å–∫–≤–∞–¥–∞:\n"
        for _, username, pubg_id in escorts:
            response += f"@{username or 'Unknown'} (PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
        await callback_query.message.answer(response)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_members: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def add_escort_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        await state.set_state(Form.escort_info)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 –ù–∞–∑–≤–∞–Ω–∏–µ–°–∫–≤–∞–¥–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_escort_handler: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.escort_info))
async def process_escort_info(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"])
            return
        user_id = int(parts[0])
        squad_name = parts[1].strip()

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            if not squad:
                await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            cursor = await conn.execute(
                "SELECT COUNT(*) FROM escorts WHERE squad_id = ?", (squad[0],)
            )
            member_count = (await cursor.fetchone())[0]
            if member_count >= 6:
                await message.answer(MESSAGES["squad_full"].format(squad_name=squad_name))
                return

            await conn.execute(
                "INSERT OR REPLACE INTO escorts (telegram_id, squad_id, username) "
                "VALUES (?, ?, (SELECT username FROM escorts WHERE telegram_id = ?))",
                (user_id, squad[0], user_id)
            )
            await conn.commit()

        await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'!")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {user_id} –≤ —Å–∫–≤–∞–¥ {squad_name}")
        await notify_admins(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'")
    except ValueError:
        await message.answer(MESSAGES["invalid_format"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_escort_info: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await add_escort(user_id, message.from_user.username or "Unknown")
            escort = await get_escort(user_id)

        escort_id, squad_id, pubg_id, balance, reputation, orders, username = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad = await cursor.fetchone()

        response = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üîπ Username: @{username or 'Unknown'}\n"
            f"üîπ PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üè† –°–∫–≤–∞–¥: {squad[0] if squad else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            f"‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
            f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders}\n"
            f"\n–í–≤–µ–¥–∏—Ç–µ PUBG ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
        )
        await message.answer(response)
        await state.set_state(Form.pubg_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_profile: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.pubg_id))
async def process_pubg_id(message: types.Message, state: FSMContext):
    pubg_id = message.text.strip()
    user_id = message.from_user.id
    if not pubg_id:
        await message.answer(MESSAGES["invalid_format"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE escorts SET pubg_id = ? WHERE telegram_id = ?",
                (pubg_id, user_id)
            )
            await conn.commit()
        await message.answer(f"üîπ PUBG ID {pubg_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª PUBG ID: {pubg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_pubg_id: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def available_orders(message: types.Message):
    try:
        await fetch_manual_orders()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT fanpay_order_id, customer_info, amount FROM orders WHERE status = 'pending'"
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer(MESSAGES["no_orders"])
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for order_id, customer, amount in orders:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"–ó–∞–∫–∞–∑ #{order_id} - {amount:.2f} —Ä—É–±.",
                    callback_data=f"order_{order_id}"
                )
            ])
        await message.answer("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ available_orders: {e}")
        await message.answer(MESSAGES["error"])

@dp.callback_query(F.data.startswith('order_'))
async def process_order_selection(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback_query.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        if not escort[2]:
            await callback_query.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ PUBG ID –≤ –ø—Ä–æ—Ñ–∏–ª–µ!", show_alert=True)
            return
        if not escort[1]:
            await callback_query.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ.", show_alert=True)
            return

        squad_id = escort[1]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM escorts WHERE squad_id = ?", (squad_id,)
            )
            member_count = (await cursor.fetchone())[0]
            if member_count < 3:
                await callback_query.answer(MESSAGES["squad_too_small"], show_alert=True)
                return

            cursor = await conn.execute(
                "SELECT fanpay_order_id, customer_info, amount FROM orders WHERE fanpay_order_id = ?",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback_query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ])
        await callback_query.message.answer(
            f"üìã –ó–∞–∫–∞–∑ #{order[0]}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order[1]}\n"
            f"üí∞ –°—É–º–º–∞: {order[2]:.2f} —Ä—É–±.\n"
            f"üìù –î–µ—Ç–∞–ª–∏: –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º 2 —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_order_selection: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.callback_query(F.data.startswith('accept_'))
async def process_accept_order(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort or not escort[1]:
            await callback_query.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ.", show_alert=True)
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id, amount FROM orders WHERE fanpay_order_id = ? AND status = 'pending'",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback_query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç.", show_alert=True)
                return

            order_db_id, squad_id, amount = order
            if escort[1] != squad_id:
                await callback_query.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤ —ç—Ç–æ–º —Å–∫–≤–∞–¥–µ.", show_alert=True)
                return

            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts WHERE order_id = ?", (order_db_id,)
            )
            accepted_count = (await cursor.fetchone())[0]

            await conn.execute(
                "INSERT INTO order_escorts (order_id, escort_id, pubg_id) VALUES (?, ?, ?)",
                (order_db_id, escort[0], escort[2])
            )

            if accepted_count + 1 >= 2:
                await conn.execute(
                    "UPDATE orders SET status = 'in_progress' WHERE id = ?", (order_db_id,)
                )
                escorts = await get_squad_escorts(squad_id)
                pubg_ids = [escort[2] for escort in escorts if escort[2]]
                await notify_squad(
                    squad_id,
                    f"üìã –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n"
                    f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                    f"PUBG ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö: {', '.join(pubg_ids)}"
                )
                await notify_admins(f"üìã –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç —Å–∫–≤–∞–¥–æ–º {squad_id}")
            await conn.commit()

        await callback_query.message.answer(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #{order_id}")
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_accept_order: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.message(F.text == "üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.fanpay_order_id, o.customer_info, o.amount, o.status
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer(MESSAGES["no_active_orders"])
            return

        response = "üìä –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
        for order_id, customer, amount, status in orders:
            response += (
                f"üìã –ó–∞–∫–∞–∑ #{order_id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {customer}\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_orders: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def complete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.fanpay_order_id, o.id, o.squad_id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                WHERE oe.escort_id = ? AND o.status = 'in_progress'
                ''', (escort_id,)
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for order_id, _, _, amount in orders:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"–ó–∞–∫–∞–∑ #{order_id} - {amount:.2f} —Ä—É–±.",
                    callback_data=f"complete_{order_id}"
                )
            ])
        await message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order: {e}")
        await message.answer(MESSAGES["error"])

@dp.callback_query(F.data.startswith('complete_'))
async def process_complete_order(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.id, o.squad_id, o.amount, o.status
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                WHERE o.fanpay_order_id = ? AND oe.escort_id = (SELECT id FROM escorts WHERE telegram_id = ?)
                ''', (order_id, user_id)
            )
            order = await cursor.fetchone()
            if not order:
                await callback_query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.", show_alert=True)
                return

            order_db_id, squad_id, amount, status = order
            if status == 'completed':
                await callback_query.answer(MESSAGES["order_already_completed"].format(order_id=order_id), show_alert=True)
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="1‚≠ê", callback_data=f"rate_{order_id}_1"),
                    InlineKeyboardButton(text="2‚≠ê", callback_data=f"rate_{order_id}_2"),
                    InlineKeyboardButton(text="3‚≠ê", callback_data=f"rate_{order_id}_3"),
                    InlineKeyboardButton(text="4‚≠ê", callback_data=f"rate_{order_id}_4"),
                    InlineKeyboardButton(text="5‚≠ê", callback_data=f"rate_{order_id}_5")
                ]
            ])
            await callback_query.message.answer("üåü –û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ (1-5 –∑–≤–µ–∑–¥):", reply_markup=keyboard)
            await state.update_data(order_id=order_db_id, squad_id=squad_id, amount=amount)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_complete_order: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)

@dp.callback_query(F.data.startswith('rate_'))
async def process_order_rating(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    order_id, rating = parts[1], int(parts[2])
    user_id = callback_query.from_user.id
    data = await state.get_data()
    order_db_id, squad_id, amount = data['order_id'], data['squad_id'], data['amount']

    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                '''
                UPDATE orders
                SET status = 'completed', completed_at = ?, rating = ?
                WHERE id = ?
                ''', (datetime.now(), rating, order_db_id)
            )
            await conn.execute(
                '''
                UPDATE escorts
                SET completed_orders = completed_orders + 1, reputation = reputation + ?
                WHERE id IN (SELECT escort_id FROM order_escorts WHERE order_id = ?)
                ''', (rating, order_db_id)
            )
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts WHERE order_id = ?", (order_db_id,)
            )
            escort_count = (await cursor.fetchone())[0]
            share = 0
            if escort_count > 0:
                share = (amount * 0.95) / escort_count
                await conn.execute(
                    '''
                    UPDATE escorts
                    SET balance = balance + ?
                    WHERE id IN (SELECT escort_id FROM order_escorts WHERE order_id = ?)
                    ''', (share, order_db_id)
                )
            await conn.commit()

        await notify_squad(
            squad_id,
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
            f"üåü –û—Ü–µ–Ω–∫–∞: {rating} –∑–≤–µ–∑–¥\n"
            f"üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {share:.2f} —Ä—É–±. –∫–∞–∂–¥–æ–º—É"
        )
        await notify_admins(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∫–≤–∞–¥–æ–º {squad_id}, –æ—Ü–µ–Ω–∫–∞: {rating} –∑–≤–µ–∑–¥")
        await callback_query.message.answer(MESSAGES["order_completed"].format(order_id=order_id))
        logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, –æ—Ü–µ–Ω–∫–∞: {rating}")
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_order_rating: {e}")
        await callback_query.answer(MESSAGES["error"], show_alert=True)
    finally:
        await state.clear()

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        await state.set_state(Form.add_order)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —Å—É–º–º—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "–ü—Ä–∏–º–µ—Ä: 789 2000 –ü—Ä–æ–¥–∞–∂–∞_–ø—Ä–µ–¥–º–µ—Ç–∞ Client1"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_order: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.add_order))
async def process_add_order(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) != 4:
            await message.answer(MESSAGES["invalid_format"])
            return
        order_id, amount, description, customer = parts[0], float(parts[1]), parts[2], parts[3]
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        new_order = {
            "id": order_id,
            "amount": amount,
            "description": description,
            "customer": customer,
            "category": "accompaniment"
        }
        ORDERS.append(new_order)

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                '''
                INSERT OR IGNORE INTO orders (fanpay_order_id, customer_info, amount, status)
                VALUES (?, ?, ?, 'pending')
                ''',
                (order_id, customer, amount)
            )
            await conn.commit()

        await message.answer(
            MESSAGES["order_added"].format(
                order_id=order_id, amount=amount, description=description, customer=customer
            )
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
        await notify_admins(
            f"üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±., {description}, –∫–ª–∏–µ–Ω—Ç: {customer}"
        )
    except ValueError:
        await message.answer(MESSAGES["invalid_format"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_order: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def remove_escort(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"])
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        await message.answer(response)
        await state.set_state(Form.escort_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_escort: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.escort_info))
async def process_remove_escort(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("DELETE FROM escorts WHERE telegram_id = ?", (user_id,))
            await conn.commit()
            if cursor.rowcount > 0:
                await message.answer(f"üóëÔ∏è –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {user_id} —É–¥–∞–ª–µ–Ω!")
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {user_id}")
                await notify_admins(f"üóëÔ∏è –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {user_id} —É–¥–∞–ª–µ–Ω")
            else:
                await message.answer(f"‚ö†Ô∏è –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_escort: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")
async def escort_balances(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.balance, s.name
                FROM escorts e
                LEFT JOIN squads s ON e.squad_id = s.id
                '''
            )
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"])
            return

        response = "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n"
        for telegram_id, username, balance, squad_name in escorts:
            response += f"ID: {telegram_id}, @{username or 'Unknown'}, –°–∫–≤–∞–¥: {squad_name or '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}, –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ escort_balances: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(F.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def add_balance(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"])
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 500"
        await message.answer(response)
        await state.set_state(Form.balance_amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_balance: {e}")
        await message.answer(MESSAGES["error"])

@dp.message(StateFilter(Form.balance_amount))
async def process_balance_amount(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"])
            return
        user_id = int(parts[0])
        amount = float(parts[1])
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "UPDATE escorts SET balance = balance + ? WHERE telegram_id = ?",
                (amount, user_id)
            )
            await conn.commit()
            if cursor.rowcount > 0:
                await message.answer(MESSAGES["balance_added"].format(user_id=user_id, amount=amount))
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await notify_admins(f"üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                try:
                    await bot.send_message(user_id, f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –Ω–∞ –±–∞–ª–∞–Ω—Å!")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id}: {e}")
            else:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer(MESSAGES["invalid_format"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_amount: {e}")
        await message.answer(MESSAGES["error"])
    finally:
        await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–æ–≤")
async def squad_statistics(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"])
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT s.name, COUNT(e.id) as member_count,
                       SUM(e.completed_orders) as total_orders,
                       SUM(e.balance) as total_balance
                FROM squads s
                LEFT JOIN escorts e ON e.squad_id = s.id
                GROUP BY s.id
                '''
            )
            squads = await cursor.fetchall()

        if not squads:
            await message.answer(MESSAGES["no_squads"])
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–æ–≤:\n"
        for name, member_count, total_orders, total_balance in squads:
            response += (
                f"üè† {name}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
                f"üìã –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {total_balance:.2f} —Ä—É–±.\n\n"
            )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_statistics: {e}")
        await message.answer(MESSAGES["error"])

# --- –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
async def check_manual_orders():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤."""
    while True:
        await fetch_manual_orders()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    try:
        await init_db()
        asyncio.create_task(check_manual_orders())
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
