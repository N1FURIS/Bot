import logging
import aiosqlite
import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "123456789,987654321").split(",") if id]
PRIVACY_URL = "https://telegra.ph/Politika-konfidencialnosti-07-19-25"
RULES_URL = "https://telegra.ph/Pravila-07-19-160"
DB_PATH = os.getenv("DB_PATH", "fanpay_bot.db")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN")
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è PUBG Mobile - Metro Royale! üéÆ",
    "no_access": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    "no_squads": "üè† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤.",
    "no_escorts": "üë§ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
    "no_orders": "üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "no_active_orders": "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
    "invalid_format": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "order_completed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} (Telegram ID: {telegram_id}, PUBG ID: {pubg_id})!",
    "order_already_completed": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
    "balance_added": "üí∏ –ë–∞–ª–∞–Ω—Å {amount} —Ä—É–±. –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
    "squad_full": "‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
    "squad_too_small": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!",
    "order_added": "üìù –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω! –°—É–º–º–∞: {amount} —Ä—É–±., –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –ö–ª–∏–µ–Ω—Ç: {customer}",
    "rules_not_accepted": "üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
    "user_banned": "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
    "user_restricted": "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {date}.",
    "balance_zeroed": "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª–µ–Ω.",
    "pubg_id_updated": "üî¢ PUBG ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
    "ping": "üèì –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!",
    "order_taken": "üìù –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç —Å–∫–≤–∞–¥–æ–º {squad_name}!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "order_not_enough_members": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 3)!",
    "order_already_in_progress": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤ –Ω–∞–±–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç!",
    "order_joined": "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–±–æ—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}!\n–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:\n{participants}",
    "order_confirmed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "not_in_squad": "‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ!",
    "max_participants": "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞!",
    "rating_submitted": "üåü –û—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –†–µ–ø—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
    "rate_order": "üåü –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ –∑–∞–∫–∞–∑ #{order_id} (1-5):"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    squad_name = State()
    escort_info = State()
    pubg_id = State()
    balance_amount = State()
    complete_order = State()
    add_order = State()
    ban_duration = State()
    rate_order = State()

# --- –í–µ–±-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∏–Ω–≥–∞ ---
async def ping(request):
    return web.Response(text="OK")

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.executescript('''
            CREATE TABLE IF NOT EXISTS squads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                rating REAL DEFAULT 0,
                rating_count INTEGER DEFAULT 0
            );
            CREATE TABLE IF NOT EXISTS escorts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                pubg_id TEXT,
                squad_id INTEGER,
                balance REAL DEFAULT 0,
                reputation INTEGER DEFAULT 0,
                completed_orders INTEGER DEFAULT 0,
                rating REAL DEFAULT 0,
                rating_count INTEGER DEFAULT 0,
                is_banned INTEGER DEFAULT 0,
                ban_until TIMESTAMP,
                restrict_until TIMESTAMP,
                rules_accepted INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id)
            );
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                fanpay_order_id TEXT UNIQUE NOT NULL,
                customer_info TEXT,
                amount REAL,
                status TEXT DEFAULT 'pending',
                squad_id INTEGER,
                completed_at TIMESTAMP,
                rating INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id)
            );
            CREATE TABLE IF NOT EXISTS order_escorts (
                order_id INTEGER,
                escort_id INTEGER,
                pubg_id TEXT,
                PRIMARY KEY (order_id, escort_id),
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (escort_id) REFERENCES escorts (id)
            );
            CREATE TABLE IF NOT EXISTS order_applications (
                order_id INTEGER,
                escort_id INTEGER,
                squad_id INTEGER,
                pubg_id TEXT,
                PRIMARY KEY (order_id, escort_id),
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (escort_id) REFERENCES escorts (id),
                FOREIGN KEY (squad_id) REFERENCES squads (id)
            );
        ''')
        await conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def get_escort(telegram_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT id, squad_id, pubg_id, balance, reputation, completed_orders, username, "
            "rating, rating_count, is_banned, ban_until, restrict_until, rules_accepted "
            "FROM escorts WHERE telegram_id = ?", (telegram_id,)
        )
        return await cursor.fetchone()

async def add_escort(telegram_id: int, username: str):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO escorts (telegram_id, username, rules_accepted) VALUES (?, ?, 0)",
            (telegram_id, username)
        )
        await conn.commit()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}")

async def get_squad_escorts(squad_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT telegram_id, username, pubg_id, rating FROM escorts WHERE squad_id = ?", (squad_id,)
        )
        return await cursor.fetchall()

async def get_squad_info(squad_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT s.name, COUNT(e.id) as member_count,
                   SUM(e.completed_orders) as total_orders,
                   SUM(e.balance) as total_balance,
                   s.rating, s.rating_count
            FROM squads s
            LEFT JOIN escorts e ON e.squad_id = s.id
            WHERE s.id = ?
            GROUP BY s.id
            ''', (squad_id,)
        )
        return await cursor.fetchone()

async def notify_squad(squad_id: int, message: str):
    escorts = await get_squad_escorts(squad_id)
    for telegram_id, _, _, _ in escorts:
        try:
            await bot.send_message(telegram_id, message)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id}: {e}")

async def notify_admins(message: str, reply_markup=None):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

async def get_order_applications(order_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT e.telegram_id, e.username, e.pubg_id, e.squad_id, s.name
            FROM order_applications oa
            JOIN escorts e ON oa.escort_id = e.id
            LEFT JOIN squads s ON e.squad_id = s.id
            WHERE oa.order_id = ?
            ''', (order_id,)
        )
        return await cursor.fetchall()

async def get_order_info(fanpay_order_id: str):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT id, customer_info, amount, status, squad_id FROM orders WHERE fanpay_order_id = ?",
            (fanpay_order_id,)
        )
        return await cursor.fetchone()

async def update_escort_reputation(escort_id: int, rating: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            '''
            UPDATE escorts SET reputation = reputation + ?, rating = rating + ?, rating_count = rating_count + 1
            WHERE id = ?
            ''', (rating, rating, escort_id)
        )
        await conn.commit()

async def update_squad_reputation(squad_id: int, rating: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            '''
            UPDATE squads SET rating = rating + ?, rating_count = rating_count + 1
            WHERE id = ?
            ''', (rating, squad_id)
        )
        await conn.commit()

async def get_order_escorts(order_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT e.telegram_id, e.username, oe.pubg_id, e.squad_id, s.name
            FROM order_escorts oe
            JOIN escorts e ON oe.escort_id = e.id
            LEFT JOIN squads s ON e.squad_id = s.id
            WHERE oe.order_id = ?
            ''', (order_id,)
        )
        return await cursor.fetchall()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_menu_keyboard(user_id: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–æ–≤"),
                KeyboardButton(text="üåü –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            ],
            [
                KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"),
                KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
            ],
            [
                KeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID"),
                KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            ],
            [
                KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
            ],
            [
                KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            ] if is_admin(user_id) else [],
            [
                KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥"),
                KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
            ],
            [
                KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ"),
                KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
            ],
            [
                KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö"),
                KeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")
            ],
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
            ],
            [
                KeyboardButton(text="üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"),
                KeyboardButton(text="‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")
            ],
            [
                KeyboardButton(text="‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å"),
                KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            ],
            [
                KeyboardButton(text="üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                KeyboardButton(text="üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")
            ],
            [
                KeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"),
                KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_rules_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞")],
            [KeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_order_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"join_order_{order_id}")]
    ])
    return keyboard

def get_confirmed_order_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{order_id}")]
    ])
    return keyboard

def get_rating_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data=f"rate_{order_id}_1"),
            InlineKeyboardButton(text="2 ‚≠ê", callback_data=f"rate_{order_id}_2"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data=f"rate_{order_id}_3"),
            InlineKeyboardButton(text="4 ‚≠ê", callback_data=f"rate_{order_id}_4"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data=f"rate_{order_id}_5")
        ]
    ])
    return keyboard

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def check_access(message: types.Message, initial_start: bool = False):
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await add_escort(user_id, message.from_user.username or "Unknown")
            escort = await get_escort(user_id)

        if escort[9]:  # is_banned
            await message.answer(MESSAGES["user_banned"], reply_markup=ReplyKeyboardRemove())
            return False
        if escort[10] and datetime.fromisoformat(escort[10]) > datetime.now():  # ban_until
            await message.answer(MESSAGES["user_banned"], reply_markup=ReplyKeyboardRemove())
            return False
        if escort[11] and datetime.fromisoformat(escort[11]) > datetime.now():  # restrict_until
            await message.answer(MESSAGES["user_restricted"].format(date=escort[11]), reply_markup=ReplyKeyboardRemove())
            return False
        if not escort[12] and initial_start:  # rules_accepted
            await message.answer(MESSAGES["rules_not_accepted"], reply_markup=get_rules_keyboard())
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_access –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    try:
        if not await check_access(message, initial_start=True):
            return
        await message.answer(f"{MESSAGES['welcome']}\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    await message.answer(MESSAGES["ping"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞")
async def accept_rules(message: types.Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("UPDATE escorts SET rules_accepted = 1 WHERE telegram_id = ?", (user_id,))
            await conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ accept_rules –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID")
async def enter_pubg_id(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PUBG ID:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.pubg_id)

@dp.message(Form.pubg_id)
async def process_pubg_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    pubg_id = message.text.strip()
    if not pubg_id:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE escorts SET pubg_id = ? WHERE telegram_id = ?",
                (pubg_id, user_id)
            )
            await conn.commit()
        await message.answer(MESSAGES["pubg_id_updated"], reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª PUBG ID: {pubg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_pubg_id –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
    finally:
        await state.clear()

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_handler(message: types.Message):
    if not await check_access(message):
        return
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)],
            [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)]
        ])
        response = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:"
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ info_handler: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text.in_(["üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞"]))
async def rules_links(message: types.Message):
    if not await check_access(message):
        return
    try:
        if message.text == "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)]
            ])
            await message.answer("üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)]
            ])
            await message.answer("üìñ –ü—Ä–∞–≤–∏–ª–∞:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rules_links: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await add_escort(user_id, message.from_user.username or "Unknown")
            escort = await get_escort(user_id)

        escort_id, squad_id, pubg_id, balance, reputation, completed_orders, username, rating, rating_count, _, ban_until, restrict_until, _ = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad = await cursor.fetchone()
        avg_rating = rating / rating_count if rating_count > 0 else 0
        response = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üîπ Username: @{username or 'Unknown'}\n"
            f"üîπ PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üè† –°–∫–≤–∞–¥: {squad[0] if squad else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            f"‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
            f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            f"üåü –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)"
        )
        await message.answer(response, reply_markup=get_menu_keyboard(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_profile: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(F.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def available_orders(message: types.Message):
    if not await check_access(message):
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, fanpay_order_id, customer_info, amount FROM orders WHERE status = 'pending'"
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer(MESSAGES["no_orders"], reply_markup=get_menu_keyboard(message.from_user.id))
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±.", callback_data=f"select_order_{db_id}")]
            for db_id, order_id, customer, amount in orders
        ])
        await message.answer("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ available_orders: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.callback_query(F.data.startswith("select_order_"))
async def select_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        await callback.answer()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ join_order –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await join_order(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("join_order_"))
async def join_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        if not escort[2]:  # pubg_id
            await callback.message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à PUBG ID!", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return

        escort_id = escort[0]
        pubg_id = escort[2]
        order_db_id = int(callback.data.split("_")[-1])

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT status, squad_id FROM orders WHERE id = ?", (order_db_id,))
            order = await cursor.fetchone()
            if not order or order[0] != "pending":
                await callback.message.answer(MESSAGES["order_already_in_progress"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            if (await cursor.fetchone())[0] > 0:
                await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É!", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ?", (order_db_id,)
            )
            participant_count = (await cursor.fetchone())[0]
            if participant_count >= 4:  # –ú–∞–∫—Å–∏–º—É–º 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await callback.message.answer(MESSAGES["max_participants"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            await conn.execute(
                "INSERT INTO order_applications (order_id, escort_id, squad_id, pubg_id) VALUES (?, ?, ?, ?) "
                "ON CONFLICT(order_id, escort_id) DO NOTHING",
                (order_db_id, escort_id, escort[1], pubg_id)
            )
            await conn.commit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        applications = await get_order_applications(order_db_id)
        participants = "\n".join(f"üë§ @{u or 'Unknown'} (PUBG ID: {p}, –°–∫–≤–∞–¥: {s or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})" for _, u, p, _, s in applications)
        response = f"üìã –ó–∞–∫–∞–∑ #{order_db_id} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants if participants else '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è'}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(applications)}/4"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞
        if len(applications) >= 2:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"start_order_{order_db_id}")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
            await callback.message.edit_text(response, reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
            await callback.message.edit_text(response, reply_markup=keyboard)

        await callback.answer()

    except aiosqlite.IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ join_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_keyboard(user_id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ join_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("start_order_"))
async def start_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        escort = await get_escort(user_id)
        if not escort or not escort[1]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–∫–≤–∞–¥–∞
            await callback.message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –≤ —Å–∫–≤–∞–¥–µ.", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT fanpay_order_id, status FROM orders WHERE id = ?", (order_db_id,)
            )
            order = await cursor.fetchone()
            if not order or order[1] != "pending":
                await callback.message.answer(MESSAGES["order_already_in_progress"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            cursor = await conn.execute(
                "SELECT escort_id, squad_id, pubg_id FROM order_applications WHERE order_id = ?", (order_db_id,)
            )
            applications = await cursor.fetchall()
            if len(applications) < 2 or len(applications) > 4:
                await callback.message.answer("‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ 2-4 —É—á–∞—Å—Ç–Ω–∏–∫–∞!", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–≤–∞–¥ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –ø–æ–±–µ–¥–∏–≤—à–∏–π
            winning_squad_id = applications[0][1]  # –°–∫–≤–∞–¥ –ø–µ—Ä–≤–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
            valid_applications = [app for app in applications if app[1] == winning_squad_id]

            if not valid_applications:
                await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–≤–∞–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞.", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            # –ü–µ—Ä–µ–Ω–æ—Å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ —Å–∫–≤–∞–¥–∞ –≤ order_escorts
            for escort_id, _, pubg_id in valid_applications:
                await conn.execute(
                    "INSERT INTO order_escorts (order_id, escort_id, pubg_id) VALUES (?, ?, ?) "
                    "ON CONFLICT(order_id, escort_id) DO NOTHING",
                    (order_db_id, escort_id, pubg_id)
                )
                await conn.execute(
                    "UPDATE escorts SET completed_orders = completed_orders + 1 WHERE id = ?",
                    (escort_id,)
                )
            await conn.execute(
                "UPDATE orders SET status = 'in_progress', squad_id = ? WHERE id = ?",
                (winning_squad_id, order_db_id)
            )
            await conn.execute("DELETE FROM order_applications WHERE order_id = ?", (order_db_id,))
            await conn.commit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        order_id = order[0]
        participants = "\n".join(f"üë§ @{u or 'Unknown'} (PUBG ID: {p}, –°–∫–≤–∞–¥: {s or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})" for _, u, p, _, s in await get_order_escorts(order_db_id))
        response = MESSAGES["order_confirmed"].format(order_id=order_id, participants=participants)
        keyboard = get_confirmed_order_keyboard(order_id)
        await callback.message.edit_text(response, reply_markup=keyboard)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for telegram_id, _, _, _, _ in await get_order_escorts(order_db_id):
            await bot.send_message(telegram_id, f"üìù –ó–∞–∫–∞–∑ #{order_id} –Ω–∞—á–∞—Ç! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é.", reply_markup=get_menu_keyboard(telegram_id))

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (winning_squad_id,))
            squad_name = (await cursor.fetchone())[0] or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        await notify_admins(MESSAGES["order_taken"].format(order_id=order_id, squad_name=squad_name, participants=participants))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("complete_order_"))
async def complete_order_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    order_id = callback.data.split("_")[-1]
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id = escort[0]
        username = escort[6] or "Unknown"
        pubg_id = escort[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id, amount FROM orders WHERE fanpay_order_id = ? AND status = 'in_progress'",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer(MESSAGES["order_already_completed"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            order_db_id, squad_id, amount = order

            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_escorts WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            if (await cursor.fetchone())[0] == 0:
                await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ.", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return

            await conn.execute(
                "UPDATE orders SET status = 'completed', completed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (order_db_id,)
            )
            await conn.commit()

        await callback.message.edit_text(MESSAGES["order_completed"].format(order_id=order_id, username=username, telegram_id=user_id, pubg_id=pubg_id), reply_markup=None)
        admin_message = MESSAGES["order_completed"].format(order_id=order_id, username=username, telegram_id=user_id, pubg_id=pubg_id)
        await notify_admins(admin_message)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        participants = await get_order_escorts(order_db_id)
        for telegram_id, _, _, _, _ in participants:
            try:
                await bot.send_message(telegram_id, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫–∏.", reply_markup=get_menu_keyboard(telegram_id))
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ü–µ–Ω–∫–∏
        rating_keyboard = get_rating_keyboard(order_id)
        await notify_admins(MESSAGES["rate_order"].format(order_id=order_id), reply_markup=rating_keyboard)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order_callback –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        await callback.answer()

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT escort_id FROM order_applications WHERE order_id = ? AND escort_id = (SELECT id FROM escorts WHERE telegram_id = ?)",
                (order_db_id, user_id)
            )
            escort = await cursor.fetchone()
            if not escort:
                await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ.", reply_markup=get_menu_keyboard(user_id))
                return

            await conn.execute(
                "DELETE FROM order_applications WHERE order_id = ? AND escort_id = (SELECT id FROM escorts WHERE telegram_id = ?)",
                (order_db_id, user_id)
            )
            await conn.commit()

        applications = await get_order_applications(order_db_id)
        participants = "\n".join(f"üë§ @{u or 'Unknown'} (PUBG ID: {p}, –°–∫–≤–∞–¥: {s or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})" for _, u, p, _, s in applications)
        response = f"üìã –ó–∞–∫–∞–∑ #{order_db_id} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants if participants else '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è'}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(applications)}/4"
        
        if len(applications) >= 2:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"start_order_{order_db_id}")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
            await callback.message.edit_text(response, reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
            await callback.message.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.fanpay_order_id, o.customer_info, o.amount, o.status
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer(MESSAGES["no_active_orders"], reply_markup=get_menu_keyboard(user_id))
            return

        response = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
        for order_id, customer, amount, status in orders:
            status_text = "–û–∂–∏–¥–∞–µ—Ç" if status == "pending" else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if status == "in_progress" else "–ó–∞–≤–µ—Ä—à–µ–Ω"
            response += f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±., –°—Ç–∞—Ç—É—Å: {status_text}\n"
        await message.answer(response, reply_markup=get_menu_keyboard(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_orders: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def complete_order(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.fanpay_order_id, o.id, o.squad_id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ? AND o.status = 'in_progress'
                ''', (user_id,)
            )
            orders = await cursor.fetchall()

        if not orders:
            await message.answer(MESSAGES["no_active_orders"], reply_markup=get_menu_keyboard(user_id))
            return

        response = "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
        for order_id, _, _, amount in orders:
            response += f"#{order_id} - {amount:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.complete_order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(Form.complete_order)
async def process_complete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    order_id = message.text.strip()
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id = escort[0]
        username = escort[6] or "Unknown"
        pubg_id = escort[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id, amount FROM orders WHERE fanpay_order_id = ? AND status = 'in_progress'",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await message.answer(MESSAGES["order_already_completed"], reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return
            order_db_id, squad_id, amount = order

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∏—Å–ª–µ–Ω –ª–∏ –±–∞–ª–∞–Ω—Å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            cursor = await conn.execute("SELECT SUM(balance) FROM escorts WHERE squad_id = ?", (squad_id,))
            total_balance = (await cursor.fetchone())[0] or 0
            if total_balance < amount:
                await message.answer(f"‚ö†Ô∏è –û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–≤–∞–¥–∞ ({total_balance:.2f} —Ä—É–±.) –º–µ–Ω—å—à–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ ({amount:.2f} —Ä—É–±.). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return

            await conn.execute(
                "UPDATE orders SET status = 'completed', completed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (order_db_id,)
            )
            await conn.commit()

        await message.answer(MESSAGES["order_completed"].format(order_id=order_id, username=username, telegram_id=user_id, pubg_id=pubg_id), reply_markup=get_menu_keyboard(user_id))
        admin_message = MESSAGES["order_completed"].format(order_id=order_id, username=username, telegram_id=user_id, pubg_id=pubg_id)
        await notify_admins(admin_message)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        participants = await get_order_escorts(order_db_id)
        for telegram_id, _, _, _, _ in participants:
            try:
                await bot.send_message(telegram_id, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫–∏.")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ü–µ–Ω–∫–∏
        rating_keyboard = get_rating_keyboard(order_id)
        await notify_admins(MESSAGES["rate_order"].format(order_id=order_id), reply_markup=rating_keyboard)

        logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_complete_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

@dp.callback_query(F.data.startswith("rate_"))
async def rate_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()
        return
    try:
        _, order_id, rating = callback.data.split("_")
        order_id = order_id
        rating = int(rating)
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, squad_id FROM orders WHERE fanpay_order_id = ? AND status = 'completed'",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            order_db_id, squad_id = order

            cursor = await conn.execute(
                "SELECT escort_id FROM order_escorts WHERE order_id = ?", (order_db_id,)
            )
            escorts = await cursor.fetchall()

            for (escort_id,) in escorts:
                await update_escort_reputation(escort_id, rating)
            await update_squad_reputation(squad_id, rating)
            await conn.execute(
                "UPDATE orders SET rating = ? WHERE id = ?", (rating, order_db_id)
            )
            await conn.commit()

        await callback.message.edit_text(MESSAGES["rating_submitted"].format(rating=rating, order_id=order_id), reply_markup=None)
        await notify_squad(squad_id, f"üåü –ó–∞–∫–∞–∑ #{order_id} –ø–æ–ª—É—á–∏–ª –æ—Ü–µ–Ω–∫—É {rating}!")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–æ–≤")
async def squad_rating(message: types.Message):
    if not await check_access(message):
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT name, rating, rating_count FROM squads ORDER BY rating DESC"
            )
            squads = await cursor.fetchall()

        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_menu_keyboard(message.from_user.id))
            return

        response = "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–∫–≤–∞–¥–æ–≤:\n"
        for name, rating, rating_count in squads:
            avg_rating = rating / rating_count if rating_count > 0 else 0
            response += f"üè† {name}: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
        await message.answer(response, reply_markup=get_menu_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_rating: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üåü –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def user_rating(message: types.Message):
    if not await check_access(message):
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username, rating, rating_count FROM escorts ORDER BY rating DESC"
            )
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_menu_keyboard(message.from_user.id))
            return

        response = "üåü –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for username, rating, rating_count in escorts:
            avg_rating = rating / rating_count if rating_count > 0 else 0
            response += f"üë§ @{username or 'Unknown'}: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
        await message.answer(response, reply_markup=get_menu_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_rating: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")
async def add_squad(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.squad_name)

@dp.message(Form.squad_name)
async def process_squad_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    squad_name = message.text.strip()
    if not squad_name:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            await conn.commit()
        await message.answer(f"üè† –°–∫–≤–∞–¥ '{squad_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∫–≤–∞–¥: {squad_name}")
        await notify_admins(f"üè† –ù–æ–≤—ã–π —Å–∫–≤–∞–¥ '{squad_name}' —Å–æ–∑–¥–∞–Ω")
    except aiosqlite.IntegrityError:
        await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_squad_name –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
async def list_squads(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, name, (SELECT COUNT(*) FROM escorts WHERE squad_id = squads.id) as count "
                "FROM squads"
            )
            squads = await cursor.fetchall()

        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_admin_keyboard())
            return

        response = "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤:\n"
        for squad_id, name, count in squads:
            response += f"{squad_id}. {name} ({count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_squads: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def add_escort_handler(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 –ù–∞–∑–≤–∞–Ω–∏–µ–°–∫–≤–∞–¥–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.escort_info)

@dp.message(Form.escort_info)
async def process_escort_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
            await state.clear()
            return
        escort_id = int(parts[0])
        squad_name = parts[1].strip()

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE name = ?", (squad_name,))
            squad = await cursor.fetchone()
            if not squad:
                await message.answer(f"‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_admin_keyboard())
                await state.clear()
                return

            cursor = await conn.execute("SELECT COUNT(*) FROM escorts WHERE squad_id = ?", (squad[0],))
            member_count = (await cursor.fetchone())[0]
            if member_count >= 6:
                await message.answer(MESSAGES["squad_full"].format(squad_name=squad_name), reply_markup=get_admin_keyboard())
                await state.clear()
                return

            await conn.execute(
                "INSERT OR REPLACE INTO escorts (telegram_id, squad_id, username, rules_accepted) "
                "VALUES (?, ?, (SELECT username FROM escorts WHERE telegram_id = ?), 0)",
                (escort_id, squad[0], escort_id)
            )
            await conn.commit()

        await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escort_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'!", reply_markup=get_admin_keyboard())
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π {escort_id} –≤ —Å–∫–≤–∞–¥ {squad_name}")
        await notify_admins(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escort_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ '{squad_name}'")
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_escort_info –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def remove_escort(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.escort_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_escort: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")
async def escort_balances(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT e.telegram_id, e.username, e.balance, s.name FROM escorts e LEFT JOIN squads s ON e.squad_id = s.id"
            )
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n"
        for telegram_id, username, balance, squad_name in escorts:
            response += f"ID: {telegram_id}, @{username or 'Unknown'}, –°–∫–≤–∞–¥: {squad_name or '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}, –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ escort_balances: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")
async def add_balance(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 500"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.balance_amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_balance: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.balance_amount)
async def process_balance_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
            await state.clear()
            return
        target_id = int(parts[0])
        amount = float(parts[1])
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", reply_markup=get_admin_keyboard())
            await state.clear()
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "UPDATE escorts SET balance = balance + ? WHERE telegram_id = ?",
                (amount, target_id)
            )
            await conn.commit()
            if cursor.rowcount > 0:
                await message.answer(MESSAGES["balance_added"].format(user_id=target_id, amount=amount), reply_markup=get_admin_keyboard())
                logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
                try:
                    await bot.send_message(target_id, f"üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} —Ä—É–±. –Ω–∞ –±–∞–ª–∞–Ω—Å!")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {target_id}: {e}")
            else:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_amount –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def squad_statistics(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT s.name, COUNT(e.id) as member_count,
                       SUM(e.completed_orders) as total_orders,
                       SUM(e.balance) as total_balance,
                       s.rating, s.rating_count
                FROM squads s
                LEFT JOIN escorts e ON e.squad_id = s.id
                GROUP BY s.id
                '''
            )
            squads = await cursor.fetchall()

        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_admin_keyboard())
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–≤–∞–¥–æ–≤:\n"
        for name, member_count, total_orders, total_balance, rating, rating_count in squads:
            avg_rating = rating / rating_count if rating_count > 0 else 0
            response += (
                f"üè† {name}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
                f"üìã –ó–∞–∫–∞–∑–æ–≤: {total_orders or 0}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {total_balance or 0:.2f} —Ä—É–±.\n"
                f"üåü –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n\n"
            )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ squad_statistics: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —Å—É–º–º—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ü—Ä–∏–º–µ—Ä: 789 2000 –ü—Ä–æ–¥–∞–∂–∞_–ø—Ä–µ–¥–º–µ—Ç–∞ Client1",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.add_order)

@dp.message(Form.add_order)
async def process_add_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) != 4:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
            await state.clear()
            return
        order_id, amount, description, customer = parts[0], float(parts[1]), parts[2], parts[3]
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", reply_markup=get_admin_keyboard())
            await state.clear()
            return

        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "INSERT INTO orders (fanpay_order_id, customer_info, amount, status) VALUES (?, ?, ?, 'pending')",
                (order_id, customer, amount)
            )
            await conn.commit()

        await message.answer(
            MESSAGES["order_added"].format(order_id=order_id, amount=amount, description=description, customer=customer),
            reply_markup=get_admin_keyboard()
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        await notify_admins(f"üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±., {description}, –∫–ª–∏–µ–Ω—Ç: {customer}")
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@dp.message(F.text == "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
async def ban_user_permanent(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.escort_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_user_permanent: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")
async def ban_user_temporary(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 7"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.ban_duration)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_user_temporary: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.ban_duration)
async def process_ban_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
            await state.clear()
            return
        target_id = int(parts[0])
        days = int(parts[1])
        ban_until = datetime.now() + timedelta(days=days)
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE escorts SET ban_until = ? WHERE telegram_id = ?",
                (ban_until.isoformat(), target_id)
            )
            await conn.commit()
            if conn.rowcount > 0:
                await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until}", reply_markup=get_admin_keyboard())
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until}")
                try:
                    await bot.send_message(target_id, f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_until}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {target_id}: {e}")
            else:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_duration –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@dp.message(F.text == "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
async def restrict_user(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 7"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.ban_duration)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restrict_user: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT e.telegram_id, e.username, e.pubg_id, s.name, e.is_banned, e.ban_until, e.restrict_until
                FROM escorts e
                LEFT JOIN squads s ON e.squad_id = s.id
                '''
            )
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for telegram_id, username, pubg_id, squad_name, is_banned, ban_until, restrict_until in escorts:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            if is_banned:
                status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
            elif ban_until and datetime.fromisoformat(ban_until) > datetime.now():
                status = f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until}"
            elif restrict_until and datetime.fromisoformat(restrict_until) > datetime.now():
                status = f"‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {restrict_until}"
            response += (
                f"ID: {telegram_id}, @{username or 'Unknown'}, PUBG ID: {pubg_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}, "
                f"–°–∫–≤–∞–¥: {squad_name or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}, –°—Ç–∞—Ç—É—Å: {status}\n"
            )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def zero_balance(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.escort_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ zero_balance: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")
async def view_all_balances(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT telegram_id, username, balance FROM escorts"
            )
            escorts = await cursor.fetchall()

        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return

        response = "üìä –ë–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for telegram_id, username, balance in escorts:
            response += f"ID: {telegram_id}, @{username or 'Unknown'}, –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_all_balances: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
@dp.message(F.text == "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥")
async def admin_commands_help(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        response = (
            "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n"
            "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥ - –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–∫–≤–∞–¥ (–º–∞–∫—Å–∏–º—É–º 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).\n"
            "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤ - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∫–≤–∞–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
            "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∫–≤–∞–¥ (—á–µ—Ä–µ–∑ Telegram ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–≤–∞–¥–∞).\n"
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å - –ù–∞—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏ —Å—É–º–º–∞).\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–≤–∞–¥–∞–º.\n"
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (ID, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–ª–∏–µ–Ω—Ç).\n"
            "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ - –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ ID.\n"
            "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è - –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n"
            "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º.\n"
            "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å - –û–±–Ω—É–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.\n"
            "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_commands_help: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_menu(message: types.Message):
    if not await check_access(message):
        return
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_menu_keyboard(message.from_user.id))

# --- –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT COUNT(*) FROM escorts")
            total_escorts = (await cursor.fetchone())[0]
            cursor = await conn.execute("SELECT COUNT(*) FROM squads")
            total_squads = (await cursor.fetchone())[0]
            cursor = await conn.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'")
            completed_orders = (await cursor.fetchone())[0]
            cursor = await conn.execute("SELECT SUM(amount) FROM orders WHERE status = 'completed'")
            total_earnings = (await cursor.fetchone())[0] or 0
            cursor = await conn.execute("SELECT AVG(rating) FROM orders WHERE status = 'completed'")
            avg_rating = (await cursor.fetchone())[0] or 0

        response = (
            "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë• –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö: {total_escorts}\n"
            f"üè† –°–∫–≤–∞–¥–æ–≤: {total_squads}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings:.2f} —Ä—É–±.\n"
            f"üåü –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤: {avg_rating:.2f} ‚≠ê"
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–∏–Ω–≥–∞
        app = web.Application()
        app.router.add_get('/ping', ping)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
